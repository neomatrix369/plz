#!/usr/bin/env zsh

set -e
set -u
set -o err_return
set -o pipefail

cd ${0:a:h:h}

source ./test/utils.sh

function run_test {
  local test_name test_directory
  local expected_exit_status actual_exit_status_file actual_exit_status
  local expected_logs actual_logs
  local expected_output_directory actual_output_directory
  local start end

  test_name=$1
  test_directory="${PWD}/test/${test_name}"

  echo
  info "Running ${test_name}..."

  if [[ -f "${test_directory}/expected-status" ]]; then
    expected_exit_status=$(cat "${test_directory}/expected-status")
  else
    expected_exit_status=0
  fi
  actual_exit_status_file=$(mktemp "${DATA_DIRECTORY}/plz-test-status.XXXXX")
  expected_logs="${test_directory}/expected-logs"
  actual_logs=$(mktemp "${DATA_DIRECTORY}/plz-test-logs.XXXXX")
  expected_output_directory="${test_directory}/expected-output"
  actual_output_directory=$(mktemp "${DATA_DIRECTORY}/plz-test-output.XXXXX")
  rm $actual_output_directory # It's been created as a file.

  start=$(date +%s)
  run_cli $test_name $test_directory $actual_exit_status_file $actual_logs $actual_output_directory
  end=$(date +%s)

  info "Time taken: $((end - start))s."

  actual_exit_status=$(cat $actual_exit_status_file)
  if $bless; then
    if [[ $actual_exit_status -eq $expected_exit_status ]]; then
      info 'Blessing output...'
      cp $actual_logs $expected_logs
      rm -rf $expected_output_directory
      if [[ -e $actual_output_directory ]]; then
        cp -R $actual_output_directory $expected_output_directory
      fi
      info 'Test blessed.'
    else
      error "Exited with a status code of ${actual_exit_status}."
      return 1
    fi
  else
    if [[ $actual_exit_status -ne $expected_exit_status ]]; then
      error "Exited with a status code of ${actual_exit_status}."
      error "Expected a status code of ${expected_exit_status}."
      error 'Test failed.'
      return 1
    else
      info 'Comparing output...'
      if diff $expected_logs $actual_logs && \
         ( ! [[ -e $expected_output_directory ]] || \
           diff $expected_output_directory $actual_output_directory ); then
        info 'Test passed.'
      else
        error 'Test failed.'
        return 1
      fi
    fi
  fi
}

function run_cli {
  local test_name app_directory exit_status_file logs_file output_directory
  local project_name test_config_file suffix cli_container volume test_args
  test_name=$1
  app_directory=$2
  exit_status_file=${3:a}
  logs_file=${4:a}
  output_directory=${5:a}
  project_name=$(tr -C '[:alnum:]' '-' <<< $test_name)
  test_config_file="${app_directory}/test.config.json"
  suffix=$(slug ${app_directory:t})
  cli_container="${CLI_CONTAINER_PREFIX}_${suffix}"
  volume="${VOLUME_PREFIX}_${suffix}"

  test_args=()
  if [[ -f $test_config_file ]]; then
    IFS=$'\n' test_args=($(jq -r '(.args // []) | .[]' < $test_config_file))
  fi

  # Add the app directory to a Docker volume.
  docker volume create $volume > /dev/null
  docker run \
    --name=$volume \
    --detach \
    --interactive \
    --volume=$volume:/data \
    docker:stable-git \
    /bin/cat \
    > /dev/null
  docker container cp $app_directory $volume:/data/app

  # Initialize a Git repository to make excludes work.
  docker container run \
    --rm \
    --volume=$volume:/data \
    docker:stable-git \
    git init --quiet /data/app

  # Start the CLI process.
  docker container run \
    --name=$cli_container \
    --detach \
    --network=$NETWORK \
    --env=PLZ_HOST=$PLZ_HOST \
    --env=PLZ_PORT=$PLZ_PORT \
    --env=PLZ_USER='plz-test' \
    --env=PLZ_PROJECT=$project_name \
    --env=PLZ_QUIET_BUILD=true \
    --workdir=/data/app \
    --volume="${volume}:/data" \
    $CLI_IMAGE \
    run --output=/data/output $test_args \
    > /dev/null

  # Capture the logs and exit status.
  docker container logs --follow $cli_container \
    |& redact_uuids \
    |& redact_debug_messages \
    |& redact_instance_status \
    | tee $logs_file
  docker wait $cli_container > $exit_status_file
  docker container rm $cli_container > /dev/null

  # Extract the output.
  docker container exec $volume sh -c '[ ! -d /data/output ]' \
    || docker container cp $volume:/data/output $output_directory
  remove_volume $volume
}

function diff {
  git --no-pager diff --no-index $@
}

function slug {
  tr -C '[A-Za-z0-9_\n]' '_' <<< $1
}

function redact_uuids {
  # The "$| = 1" bit disables buffering so we get output as we need it.
  perl -pe '$| = 1; s/\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b/<UUID>/g'
}

function redact_debug_messages {
  grep -v '^:: '
}

function redact_instance_status {
  grep -v '^Instance status: '
}

# In "bless mode", instead of comparing the actual output against expected
# output, we save the output.
bless=false
while [[ $# -gt 0 ]]; do
  case $1 in
    --bless)
      bless=true
      shift ;;
    *)
      break
  esac
done

run_test $@
